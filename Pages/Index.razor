@page "/"
@using System.Numerics
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="3">
                <MudSelect @bind-Value="@chain" T="string" Label="chain" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("ethereum")"/>
                </MudSelect>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="@network" T="string" Label="network" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("mainnet")"/>
                    <MudSelectItem Value="@("goerli")"/>
                    <MudSelectItem Value="@("sepolia")"/>
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="infuraKey" Label="infuraKey" Variant="Variant.Outlined" Required="true"></MudTextField>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="11">
                <MudTextField @bind-Value="address" Label="address" Variant="Variant.Outlined" Required="true"></MudTextField>
            </MudItem>
            <MudItem xs="1">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@GetBalance">Get Data</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>
<br/>
<MudText>Please enter an address and infuraKey. You can go to 
    <MudLink Href="https://app.infura.io" Target="_blank">
        https://app.infura.io
    </MudLink>
    to register an account and get the key to access</MudText>
<br/>
<MudGrid>
    <MudItem xs="6">
        <MudCard>
            <MudCardContent>
                <MudText>Address: @address</MudText>
                <MudText>Balance: @balanceInEther ETH</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="6">

    </MudItem>
</MudGrid>

@code {
    private string? address;
    private string? infuraKey;
    private decimal balanceInEther;
    private string network = "mainnet";
    private string chain = "ethereum";
    
    private async Task GetBalance()
    {
        if (infuraKey == null || address == null)
        {
            return;
        }
        
        var requestObj = new
        {
            jsonrpc = "2.0",
            id = 1,
            method = "eth_getBalance",
            @params = new[] { address, "latest" }
        };

        var requestJson = JsonSerializer.Serialize(requestObj);

        var response = await Http.PostAsync(
            "https://"+ network +".infura.io/v3/" + infuraKey,
            new StringContent(requestJson, Encoding.UTF8, "application/json")
            );
        var responseContent = await response.Content.ReadAsStringAsync();

        using var doc = JsonDocument.Parse(responseContent);
        var root = doc.RootElement;
        var weiPerEther = BigInteger.Pow(10, 18);
        if (root.TryGetProperty("result", out var resultProperty))
        {
            var balanceHex = resultProperty.GetString();
            if (balanceHex != null)
            {
                var balanceInWei = BigInteger.Parse("00" + balanceHex[2..], System.Globalization.NumberStyles.AllowHexSpecifier);
                var wholeEther = BigInteger.DivRem(balanceInWei, weiPerEther, out var remainder);
                var fractionEther = (decimal)remainder / (decimal)Math.Pow(10, 18);
                var ether = (decimal)wholeEther + fractionEther;

                balanceInEther = ether;
                Snackbar.Add($"Successfully fetched data.", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add($"Failed to fetched data.", Severity.Error);
        }
    }

}